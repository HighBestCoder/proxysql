diff --git src/interfaces/libpq/fe-exec.c src/interfaces/libpq/fe-exec.c
index 2265ab5..56883ec 100644
--- src/interfaces/libpq/fe-exec.c
+++ src/interfaces/libpq/fe-exec.c
@@ -4484,3 +4484,9 @@ PQgetResultFromPGconn(PGconn *conn)
        return conn->result;
 }
 
+int PShandleRowData(PGconn *conn, PSresult* result) {
+    if (!conn || !result)
+		return 1;
+    return psHandleRowData(conn, result);
+}
+
diff --git src/interfaces/libpq/fe-protocol3.c src/interfaces/libpq/fe-protocol3.c
index 9c4aa7e..eb08983 100644
--- src/interfaces/libpq/fe-protocol3.c
+++ src/interfaces/libpq/fe-protocol3.c
@@ -2299,3 +2299,102 @@ build_startup_packet(const PGconn *conn, char *packet,
 
 	return packet_len;
 }
+
+/*
+ * psHandleRowData: Processes the incoming message from the PostgreSQL backend.
+ * This function checks if the message contains row data (indicated by 'D')
+ * and processes it accordingly. It validates the message type and length,
+ * ensures that the complete message has been received, and updates the result
+ * structure if the message contains row data.
+ * 
+ * Return values:
+ *  0  -> Message processed successfully (row data handled).
+ *  1  -> Message not fully processed; the next call should be to PQisBusy.
+ * -1  -> Not enough data to process the message; the next call should be to PQconsumeInput.
+ */
+int
+psHandleRowData(PGconn *conn, PSresult* result)
+{
+	char	id;
+	int		msgLength;
+	int		avail;
+	
+	/*
+	 * Try to read a message.  First get the type code and length. Return
+	 * if not enough data.
+	 */
+	conn->inCursor = conn->inStart;
+	if (pqGetc(&id, conn))
+		return EOF;
+	if (pqGetInt(&msgLength, 4, conn))
+		return EOF;	
+
+	/*
+	 * Try to validate message type/length here.  A length less than 4 is
+	 * definitely broken.  Large lengths should only be believed for a few
+	 * message types.
+	 */
+	if (msgLength < 4)
+		return 1;
+
+	if (msgLength > 30000 && !VALID_LONG_MESSAGE_TYPE(id))
+		return 1;
+
+	/*
+	 * Can't process if message body isn't all here yet.
+	 */
+	msgLength -= 4;
+	avail = conn->inEnd - conn->inCursor;
+	if (avail < msgLength) 
+		return EOF;
+
+	if (conn->asyncStatus != PGASYNC_BUSY)
+        return 1;
+
+	if (id == 'D') 
+	{ 
+		if (conn->result != NULL &&
+			conn->result->resultStatus == PGRES_TUPLES_OK)
+		{
+			PGresult   *res = conn->result;
+			int			nfields = res->numAttributes;
+			int			tupnfields;		/* # fields from tuple */
+			int			vlen;			/* length of the current field value */
+			int			i;
+
+
+			/* Get the field count and make sure it's what we expect */
+			if (pqGetInt(&tupnfields, 2, conn))
+				return 1;
+
+			if (tupnfields != nfields)
+				return 1;
+
+			/* Scan the fields */
+			for (i = 0; i < nfields; i++)
+			{
+				/* get the value length */
+				if (pqGetInt(&vlen, 4, conn))
+					return 1;
+	
+				/* Skip over the data value */
+				if (vlen > 0)
+				{
+					if (pqSkipnchar(vlen, conn))
+						return 1;
+				}
+			}
+
+            result->id = 'D';
+            result->len = msgLength + 5;
+            result->data = conn->inBuffer + conn->inStart;
+			conn->asyncStatus = PGASYNC_BUSY;
+			/* trust the specified message length as what to skip */
+			conn->inStart += 5 + msgLength;
+			conn->inCursor = conn->inStart;
+			return 0;
+		}
+	}
+	return 1;
+}
+
diff --git src/interfaces/libpq/libpq-fe.h src/interfaces/libpq/libpq-fe.h
index c5170d1..3e3cc34 100644
--- src/interfaces/libpq/libpq-fe.h
+++ src/interfaces/libpq/libpq-fe.h
@@ -269,6 +269,18 @@ typedef struct pgresAttDesc
 	int			atttypmod;		/* type-specific modifier info */
 } PGresAttDesc;
 
+/* ----------------
+ * PSresult -- 
+ * ----------------
+ */
+typedef struct psResult
+{
+    char	    id;
+    int		    len;
+    const char* data;
+    int		    fieldcount;
+} PSresult;
+
 /* ----------------
  * Exported functions of libpq
  * ----------------
@@ -671,6 +683,9 @@ extern int	PQdefaultSSLKeyPassHook_OpenSSL(char *buf, int size, PGconn *conn);
 /* Get PGresult directly from PGconn. WARNING: DO NOT RELEASE THIS RESULT */
 extern const PGresult *PQgetResultFromPGconn(PGconn *conn);
 
+/* ProxySQL special handler function */
+extern int PShandleRowData(PGconn *conn, PSresult* result);
+
 #ifdef __cplusplus
 }
 #endif
diff --git src/interfaces/libpq/libpq-int.h src/interfaces/libpq/libpq-int.h
index a951f49..210fbc9 100644
--- src/interfaces/libpq/libpq-int.h
+++ src/interfaces/libpq/libpq-int.h
@@ -755,7 +755,7 @@ extern int	pqWaitTimed(int forRead, int forWrite, PGconn *conn,
 						time_t finish_time);
 extern int	pqReadReady(PGconn *conn);
 extern int	pqWriteReady(PGconn *conn);
-
+extern int  psHandleRowData(PGconn *conn, PSresult* result); 
 /* === in fe-secure.c === */
 
 extern int	pqsecure_initialize(PGconn *, bool, bool);
